package com.generativelight.gls.stage.devices;

import processing.core.PApplet;
import processing.core.PConstants;
import processing.data.JSONObject;

import java.io.IOException;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.Socket;

/**
 * This class represents 8 LED tubes connected to 1 Generative Light controller box.
 * Pixels on the imageArray are mapped to the LEDs inside the tubes.
 *
 * Created: Generative Light, Janneck Wullschleger, 2016
 *
 * Implementation of the opc/fadecandy stuff was taken from Micah Elizabeth Scott
 * Thank you very much for your awesome work!
 */
public class OPCDevice extends ImageDevice {

    public final static int IMAGE_DIMENSION = 128;
    public final static int TUBE_COUNT = 8;

    final static int[] PIXEL_LOCATIONS_HORIZONTAL = {1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 3076, 3078, 3080, 3082, 3084, 3086, 3088, 3090, 3092, 3094, 3096, 3098, 3100, 3102, 3104, 3106, 3108, 3110, 3112, 3114, 3116, 3118, 3120, 3122, 3124, 3126, 3128, 3130, 3132, 3134, 3136, 3138, 3140, 3142, 3144, 3146, 3148, 3150, 3152, 3154, 3156, 3158, 3160, 3162, 3164, 3166, 3168, 3170, 3172, 3174, 3176, 3178, 3180, 3182, 3184, 3186, 3188, 3190, 3192, 3194, 5124, 5126, 5128, 5130, 5132, 5134, 5136, 5138, 5140, 5142, 5144, 5146, 5148, 5150, 5152, 5154, 5156, 5158, 5160, 5162, 5164, 5166, 5168, 5170, 5172, 5174, 5176, 5178, 5180, 5182, 5184, 5186, 5188, 5190, 5192, 5194, 5196, 5198, 5200, 5202, 5204, 5206, 5208, 5210, 5212, 5214, 5216, 5218, 5220, 5222, 5224, 5226, 5228, 5230, 5232, 5234, 5236, 5238, 5240, 5242, 7172, 7174, 7176, 7178, 7180, 7182, 7184, 7186, 7188, 7190, 7192, 7194, 7196, 7198, 7200, 7202, 7204, 7206, 7208, 7210, 7212, 7214, 7216, 7218, 7220, 7222, 7224, 7226, 7228, 7230, 7232, 7234, 7236, 7238, 7240, 7242, 7244, 7246, 7248, 7250, 7252, 7254, 7256, 7258, 7260, 7262, 7264, 7266, 7268, 7270, 7272, 7274, 7276, 7278, 7280, 7282, 7284, 7286, 7288, 7290, 9220, 9222, 9224, 9226, 9228, 9230, 9232, 9234, 9236, 9238, 9240, 9242, 9244, 9246, 9248, 9250, 9252, 9254, 9256, 9258, 9260, 9262, 9264, 9266, 9268, 9270, 9272, 9274, 9276, 9278, 9280, 9282, 9284, 9286, 9288, 9290, 9292, 9294, 9296, 9298, 9300, 9302, 9304, 9306, 9308, 9310, 9312, 9314, 9316, 9318, 9320, 9322, 9324, 9326, 9328, 9330, 9332, 9334, 9336, 9338, 11268, 11270, 11272, 11274, 11276, 11278, 11280, 11282, 11284, 11286, 11288, 11290, 11292, 11294, 11296, 11298, 11300, 11302, 11304, 11306, 11308, 11310, 11312, 11314, 11316, 11318, 11320, 11322, 11324, 11326, 11328, 11330, 11332, 11334, 11336, 11338, 11340, 11342, 11344, 11346, 11348, 11350, 11352, 11354, 11356, 11358, 11360, 11362, 11364, 11366, 11368, 11370, 11372, 11374, 11376, 11378, 11380, 11382, 11384, 11386, 13316, 13318, 13320, 13322, 13324, 13326, 13328, 13330, 13332, 13334, 13336, 13338, 13340, 13342, 13344, 13346, 13348, 13350, 13352, 13354, 13356, 13358, 13360, 13362, 13364, 13366, 13368, 13370, 13372, 13374, 13376, 13378, 13380, 13382, 13384, 13386, 13388, 13390, 13392, 13394, 13396, 13398, 13400, 13402, 13404, 13406, 13408, 13410, 13412, 13414, 13416, 13418, 13420, 13422, 13424, 13426, 13428, 13430, 13432, 13434, 15364, 15366, 15368, 15370, 15372, 15374, 15376, 15378, 15380, 15382, 15384, 15386, 15388, 15390, 15392, 15394, 15396, 15398, 15400, 15402, 15404, 15406, 15408, 15410, 15412, 15414, 15416, 15418, 15420, 15422, 15424, 15426, 15428, 15430, 15432, 15434, 15436, 15438, 15440, 15442, 15444, 15446, 15448, 15450, 15452, 15454, 15456, 15458, 15460, 15462, 15464, 15466, 15468, 15470, 15472, 15474, 15476, 15478, 15480, 15482};
    final static int[] PIXEL_LOCATIONS_HORIZONTAL_REVERSED = {1146, 1144, 1142, 1140, 1138, 1136, 1134, 1132, 1130, 1128, 1126, 1124, 1122, 1120, 1118, 1116, 1114, 1112, 1110, 1108, 1106, 1104, 1102, 1100, 1098, 1096, 1094, 1092, 1090, 1088, 1086, 1084, 1082, 1080, 1078, 1076, 1074, 1072, 1070, 1068, 1066, 1064, 1062, 1060, 1058, 1056, 1054, 1052, 1050, 1048, 1046, 1044, 1042, 1040, 1038, 1036, 1034, 1032, 1030, 1028, 3194, 3192, 3190, 3188, 3186, 3184, 3182, 3180, 3178, 3176, 3174, 3172, 3170, 3168, 3166, 3164, 3162, 3160, 3158, 3156, 3154, 3152, 3150, 3148, 3146, 3144, 3142, 3140, 3138, 3136, 3134, 3132, 3130, 3128, 3126, 3124, 3122, 3120, 3118, 3116, 3114, 3112, 3110, 3108, 3106, 3104, 3102, 3100, 3098, 3096, 3094, 3092, 3090, 3088, 3086, 3084, 3082, 3080, 3078, 3076, 5242, 5240, 5238, 5236, 5234, 5232, 5230, 5228, 5226, 5224, 5222, 5220, 5218, 5216, 5214, 5212, 5210, 5208, 5206, 5204, 5202, 5200, 5198, 5196, 5194, 5192, 5190, 5188, 5186, 5184, 5182, 5180, 5178, 5176, 5174, 5172, 5170, 5168, 5166, 5164, 5162, 5160, 5158, 5156, 5154, 5152, 5150, 5148, 5146, 5144, 5142, 5140, 5138, 5136, 5134, 5132, 5130, 5128, 5126, 5124, 7290, 7288, 7286, 7284, 7282, 7280, 7278, 7276, 7274, 7272, 7270, 7268, 7266, 7264, 7262, 7260, 7258, 7256, 7254, 7252, 7250, 7248, 7246, 7244, 7242, 7240, 7238, 7236, 7234, 7232, 7230, 7228, 7226, 7224, 7222, 7220, 7218, 7216, 7214, 7212, 7210, 7208, 7206, 7204, 7202, 7200, 7198, 7196, 7194, 7192, 7190, 7188, 7186, 7184, 7182, 7180, 7178, 7176, 7174, 7172, 9338, 9336, 9334, 9332, 9330, 9328, 9326, 9324, 9322, 9320, 9318, 9316, 9314, 9312, 9310, 9308, 9306, 9304, 9302, 9300, 9298, 9296, 9294, 9292, 9290, 9288, 9286, 9284, 9282, 9280, 9278, 9276, 9274, 9272, 9270, 9268, 9266, 9264, 9262, 9260, 9258, 9256, 9254, 9252, 9250, 9248, 9246, 9244, 9242, 9240, 9238, 9236, 9234, 9232, 9230, 9228, 9226, 9224, 9222, 9220, 11386, 11384, 11382, 11380, 11378, 11376, 11374, 11372, 11370, 11368, 11366, 11364, 11362, 11360, 11358, 11356, 11354, 11352, 11350, 11348, 11346, 11344, 11342, 11340, 11338, 11336, 11334, 11332, 11330, 11328, 11326, 11324, 11322, 11320, 11318, 11316, 11314, 11312, 11310, 11308, 11306, 11304, 11302, 11300, 11298, 11296, 11294, 11292, 11290, 11288, 11286, 11284, 11282, 11280, 11278, 11276, 11274, 11272, 11270, 11268, 13434, 13432, 13430, 13428, 13426, 13424, 13422, 13420, 13418, 13416, 13414, 13412, 13410, 13408, 13406, 13404, 13402, 13400, 13398, 13396, 13394, 13392, 13390, 13388, 13386, 13384, 13382, 13380, 13378, 13376, 13374, 13372, 13370, 13368, 13366, 13364, 13362, 13360, 13358, 13356, 13354, 13352, 13350, 13348, 13346, 13344, 13342, 13340, 13338, 13336, 13334, 13332, 13330, 13328, 13326, 13324, 13322, 13320, 13318, 13316, 15482, 15480, 15478, 15476, 15474, 15472, 15470, 15468, 15466, 15464, 15462, 15460, 15458, 15456, 15454, 15452, 15450, 15448, 15446, 15444, 15442, 15440, 15438, 15436, 15434, 15432, 15430, 15428, 15426, 15424, 15422, 15420, 15418, 15416, 15414, 15412, 15410, 15408, 15406, 15404, 15402, 15400, 15398, 15396, 15394, 15392, 15390, 15388, 15386, 15384, 15382, 15380, 15378, 15376, 15374, 15372, 15370, 15368, 15366, 15364};
    final static int[] PIXEL_LOCATIONS_VERTICAL = {520, 776, 1032, 1288, 1544, 1800, 2056, 2312, 2568, 2824, 3080, 3336, 3592, 3848, 4104, 4360, 4616, 4872, 5128, 5384, 5640, 5896, 6152, 6408, 6664, 6920, 7176, 7432, 7688, 7944, 8200, 8456, 8712, 8968, 9224, 9480, 9736, 9992, 10248, 10504, 10760, 11016, 11272, 11528, 11784, 12040, 12296, 12552, 12808, 13064, 13320, 13576, 13832, 14088, 14344, 14600, 14856, 15112, 15368, 15624, 536, 792, 1048, 1304, 1560, 1816, 2072, 2328, 2584, 2840, 3096, 3352, 3608, 3864, 4120, 4376, 4632, 4888, 5144, 5400, 5656, 5912, 6168, 6424, 6680, 6936, 7192, 7448, 7704, 7960, 8216, 8472, 8728, 8984, 9240, 9496, 9752, 10008, 10264, 10520, 10776, 11032, 11288, 11544, 11800, 12056, 12312, 12568, 12824, 13080, 13336, 13592, 13848, 14104, 14360, 14616, 14872, 15128, 15384, 15640, 552, 808, 1064, 1320, 1576, 1832, 2088, 2344, 2600, 2856, 3112, 3368, 3624, 3880, 4136, 4392, 4648, 4904, 5160, 5416, 5672, 5928, 6184, 6440, 6696, 6952, 7208, 7464, 7720, 7976, 8232, 8488, 8744, 9000, 9256, 9512, 9768, 10024, 10280, 10536, 10792, 11048, 11304, 11560, 11816, 12072, 12328, 12584, 12840, 13096, 13352, 13608, 13864, 14120, 14376, 14632, 14888, 15144, 15400, 15656, 568, 824, 1080, 1336, 1592, 1848, 2104, 2360, 2616, 2872, 3128, 3384, 3640, 3896, 4152, 4408, 4664, 4920, 5176, 5432, 5688, 5944, 6200, 6456, 6712, 6968, 7224, 7480, 7736, 7992, 8248, 8504, 8760, 9016, 9272, 9528, 9784, 10040, 10296, 10552, 10808, 11064, 11320, 11576, 11832, 12088, 12344, 12600, 12856, 13112, 13368, 13624, 13880, 14136, 14392, 14648, 14904, 15160, 15416, 15672, 584, 840, 1096, 1352, 1608, 1864, 2120, 2376, 2632, 2888, 3144, 3400, 3656, 3912, 4168, 4424, 4680, 4936, 5192, 5448, 5704, 5960, 6216, 6472, 6728, 6984, 7240, 7496, 7752, 8008, 8264, 8520, 8776, 9032, 9288, 9544, 9800, 10056, 10312, 10568, 10824, 11080, 11336, 11592, 11848, 12104, 12360, 12616, 12872, 13128, 13384, 13640, 13896, 14152, 14408, 14664, 14920, 15176, 15432, 15688, 600, 856, 1112, 1368, 1624, 1880, 2136, 2392, 2648, 2904, 3160, 3416, 3672, 3928, 4184, 4440, 4696, 4952, 5208, 5464, 5720, 5976, 6232, 6488, 6744, 7000, 7256, 7512, 7768, 8024, 8280, 8536, 8792, 9048, 9304, 9560, 9816, 10072, 10328, 10584, 10840, 11096, 11352, 11608, 11864, 12120, 12376, 12632, 12888, 13144, 13400, 13656, 13912, 14168, 14424, 14680, 14936, 15192, 15448, 15704, 616, 872, 1128, 1384, 1640, 1896, 2152, 2408, 2664, 2920, 3176, 3432, 3688, 3944, 4200, 4456, 4712, 4968, 5224, 5480, 5736, 5992, 6248, 6504, 6760, 7016, 7272, 7528, 7784, 8040, 8296, 8552, 8808, 9064, 9320, 9576, 9832, 10088, 10344, 10600, 10856, 11112, 11368, 11624, 11880, 12136, 12392, 12648, 12904, 13160, 13416, 13672, 13928, 14184, 14440, 14696, 14952, 15208, 15464, 15720, 632, 888, 1144, 1400, 1656, 1912, 2168, 2424, 2680, 2936, 3192, 3448, 3704, 3960, 4216, 4472, 4728, 4984, 5240, 5496, 5752, 6008, 6264, 6520, 6776, 7032, 7288, 7544, 7800, 8056, 8312, 8568, 8824, 9080, 9336, 9592, 9848, 10104, 10360, 10616, 10872, 11128, 11384, 11640, 11896, 12152, 12408, 12664, 12920, 13176, 13432, 13688, 13944, 14200, 14456, 14712, 14968, 15224, 15480, 15736};
    final static int[] PIXEL_LOCATIONS_VERTICAL_REVERSED = {15752, 15496, 15240, 14984, 14728, 14472, 14216, 13960, 13704, 13448, 13192, 12936, 12680, 12424, 12168, 11912, 11656, 11400, 11144, 10888, 10632, 10376, 10120, 9864, 9608, 9352, 9096, 8840, 8584, 8328, 8072, 7816, 7560, 7304, 7048, 6792, 6536, 6280, 6024, 5768, 5512, 5256, 5000, 4744, 4488, 4232, 3976, 3720, 3464, 3208, 2952, 2696, 2440, 2184, 1928, 1672, 1416, 1160, 904, 648, 15768, 15512, 15256, 15000, 14744, 14488, 14232, 13976, 13720, 13464, 13208, 12952, 12696, 12440, 12184, 11928, 11672, 11416, 11160, 10904, 10648, 10392, 10136, 9880, 9624, 9368, 9112, 8856, 8600, 8344, 8088, 7832, 7576, 7320, 7064, 6808, 6552, 6296, 6040, 5784, 5528, 5272, 5016, 4760, 4504, 4248, 3992, 3736, 3480, 3224, 2968, 2712, 2456, 2200, 1944, 1688, 1432, 1176, 920, 664, 15784, 15528, 15272, 15016, 14760, 14504, 14248, 13992, 13736, 13480, 13224, 12968, 12712, 12456, 12200, 11944, 11688, 11432, 11176, 10920, 10664, 10408, 10152, 9896, 9640, 9384, 9128, 8872, 8616, 8360, 8104, 7848, 7592, 7336, 7080, 6824, 6568, 6312, 6056, 5800, 5544, 5288, 5032, 4776, 4520, 4264, 4008, 3752, 3496, 3240, 2984, 2728, 2472, 2216, 1960, 1704, 1448, 1192, 936, 680, 15800, 15544, 15288, 15032, 14776, 14520, 14264, 14008, 13752, 13496, 13240, 12984, 12728, 12472, 12216, 11960, 11704, 11448, 11192, 10936, 10680, 10424, 10168, 9912, 9656, 9400, 9144, 8888, 8632, 8376, 8120, 7864, 7608, 7352, 7096, 6840, 6584, 6328, 6072, 5816, 5560, 5304, 5048, 4792, 4536, 4280, 4024, 3768, 3512, 3256, 3000, 2744, 2488, 2232, 1976, 1720, 1464, 1208, 952, 696, 15816, 15560, 15304, 15048, 14792, 14536, 14280, 14024, 13768, 13512, 13256, 13000, 12744, 12488, 12232, 11976, 11720, 11464, 11208, 10952, 10696, 10440, 10184, 9928, 9672, 9416, 9160, 8904, 8648, 8392, 8136, 7880, 7624, 7368, 7112, 6856, 6600, 6344, 6088, 5832, 5576, 5320, 5064, 4808, 4552, 4296, 4040, 3784, 3528, 3272, 3016, 2760, 2504, 2248, 1992, 1736, 1480, 1224, 968, 712, 15832, 15576, 15320, 15064, 14808, 14552, 14296, 14040, 13784, 13528, 13272, 13016, 12760, 12504, 12248, 11992, 11736, 11480, 11224, 10968, 10712, 10456, 10200, 9944, 9688, 9432, 9176, 8920, 8664, 8408, 8152, 7896, 7640, 7384, 7128, 6872, 6616, 6360, 6104, 5848, 5592, 5336, 5080, 4824, 4568, 4312, 4056, 3800, 3544, 3288, 3032, 2776, 2520, 2264, 2008, 1752, 1496, 1240, 984, 728, 15848, 15592, 15336, 15080, 14824, 14568, 14312, 14056, 13800, 13544, 13288, 13032, 12776, 12520, 12264, 12008, 11752, 11496, 11240, 10984, 10728, 10472, 10216, 9960, 9704, 9448, 9192, 8936, 8680, 8424, 8168, 7912, 7656, 7400, 7144, 6888, 6632, 6376, 6120, 5864, 5608, 5352, 5096, 4840, 4584, 4328, 4072, 3816, 3560, 3304, 3048, 2792, 2536, 2280, 2024, 1768, 1512, 1256, 1000, 744, 15864, 15608, 15352, 15096, 14840, 14584, 14328, 14072, 13816, 13560, 13304, 13048, 12792, 12536, 12280, 12024, 11768, 11512, 11256, 11000, 10744, 10488, 10232, 9976, 9720, 9464, 9208, 8952, 8696, 8440, 8184, 7928, 7672, 7416, 7160, 6904, 6648, 6392, 6136, 5880, 5624, 5368, 5112, 4856, 4600, 4344, 4088, 3832, 3576, 3320, 3064, 2808, 2552, 2296, 2040, 1784, 1528, 1272, 1016, 760};

    private String host;
    private int port;
    private boolean isHorizontal;
    private int[] pixelLocations;

    private float dimLevel = 1.0f;
    private float stageDimLevel = 0.8f;    // to cache the dimLevel of the stage

    private Socket socket;
    private OutputStream output;
    private byte[] packetData;

    /**
     * Creates an OPCDevice
     * @param name the name of the device
     * @param host the ip address of the device on the TCP/IP network
     * @param port the port on which the fadecandy server is listening
     * @param isHorizontal when true the LED tubes are registered horizontally, otherwise they are registered vertically
     */
    public OPCDevice( String name, String host, int port, boolean isHorizontal, boolean isReversed, PApplet papplet ) {
        this.name = name;
        this.host = host;
        this.port = port;

        this.isHorizontal = isHorizontal;

        if (isHorizontal) {
            if (isReversed) {
                pixelLocations = PIXEL_LOCATIONS_HORIZONTAL_REVERSED;
            } else {
                pixelLocations = PIXEL_LOCATIONS_HORIZONTAL;
            }
        } else {
            if (isReversed) {
                pixelLocations = PIXEL_LOCATIONS_VERTICAL_REVERSED;
            } else {
                pixelLocations = PIXEL_LOCATIONS_VERTICAL;
            }
        }

        image = papplet.createGraphics(IMAGE_DIMENSION, IMAGE_DIMENSION, PConstants.P2D);
        image.imageMode(PConstants.CENTER);
        image.beginDraw();
        image.background(0);
        image.endDraw();

        connect();
    }

    /**
     * Creates an OPCDevice from a json representation of it
     * @param json the json config object
     */
    public OPCDevice( JSONObject json, PApplet papplet) {
        this(   json.getString("name"),
                json.getString("host"),
                json.getInt("port"),
                json.getBoolean("isHorizontal"),
                json.getBoolean("isReversed"),
                papplet
        );
        dimLevel = json.getFloat("dimLevel");
    }


    /**
     * Sets the dimLevel for this device.
     * @param dimLevel float between 0.0 = off and 1.0 = brightest
     */
    public void setDimLevel(float dimLevel) {
        if (dimLevel < 0.0) {
            dimLevel = 0.0f;
        } else if (dimLevel > 1.0) {
            dimLevel = 1.0f;
        }
        this.dimLevel = dimLevel;
        sendColorCorrectionPacket();
    }

    /**
     * Tells if the LED tubes are mapped horizontally or vertically.
     * @return true when horizontally orientated otherwise false
     */
    public boolean isHorizontal() {
        return isHorizontal;
    }


    /**
     * Send the color data of the LEDs to the fadecandy opc server.
     */
    public void update(float stageDimLevel) {

        if (stageDimLevel != this.stageDimLevel) {
            this.stageDimLevel = stageDimLevel;
            sendColorCorrectionPacket();
        }

        if (output == null) {
            connect();
        }
        if (output == null) {
            return;
        }

        int numPixels = pixelLocations.length;
        int ledAddress = 4;

        int numBytes = 3 * numPixels;
        int packetLen = 4 + numBytes;
        if (packetData == null || packetData.length != packetLen) {
            // Set up our packet buffer
            packetData = new byte[packetLen];
            packetData[0] = 0;  // Channel
            packetData[1] = 0;  // Command (Set pixel colors)
            packetData[2] = (byte)(numBytes >> 8);
            packetData[3] = (byte)(numBytes & 0xFF);
        }

        image.loadPixels();

        for (int i = 0; i < numPixels; i++) {
            int pixelLocation = pixelLocations[i];
            int pixel = image.pixels[pixelLocation];

            packetData[ledAddress] = (byte)(pixel >> 16);
            packetData[ledAddress + 1] = (byte)(pixel >> 8);
            packetData[ledAddress + 2] = (byte)pixel;
            ledAddress += 3;
        }

        try {
            output.write(packetData);
        } catch (Exception e) {
            disconnect();
        }
    }


    /**
     * Send a packet with the current color correction settings.
     * Used for dimming.
     */
    private void sendColorCorrectionPacket()
    {
        float calculatedDimLevel = dimLevel * stageDimLevel;
        String colorCorrection = "{ \"gamma\": " + 2.5 + ", \"whitepoint\": [" + calculatedDimLevel + "," + calculatedDimLevel + "," + calculatedDimLevel + "]}";

        if (output == null) {
            // We'll do this when we reconnect
            return;
        }

        byte[] content = colorCorrection.getBytes();
        int packetLen = content.length + 4;
        byte[] header = new byte[8];
        header[0] = 0;          // Channel (reserved)
        header[1] = (byte)0xFF; // Command (System Exclusive)
        header[2] = (byte)(packetLen >> 8);
        header[3] = (byte)(packetLen & 0xFF);
        header[4] = 0x00;       // System ID high byte
        header[5] = 0x01;       // System ID low byte
        header[6] = 0x00;       // Command ID high byte
        header[7] = 0x01;       // Command ID low byte

        try {
            output.write(header);
            output.write(content);
        } catch (Exception e) {
            disconnect();
        }
    }

    /**
     * Connect to the fadecandy opc server.
     */
    private void connect()
    {
        try {
            socket = new Socket(host, port);
            socket.setTcpNoDelay(true);
            output = socket.getOutputStream();
            System.out.println("Connected to OPCDevice " + name + " (" + host + ")");
        } catch (ConnectException e) {
            disconnect();
        } catch (IOException e) {
            disconnect();
        }

        sendColorCorrectionPacket();
        //sendFirmwareConfigPacket();
    }

    /**
     * If no output is possible clean up the socket and buffer for reconnecting.
     */
    private void disconnect() {
        if (output != null) {
            System.out.println("Disconnected from OPCDevice " + name + " (" + host + ")");
        }
        output = null;
        socket = null;
    }
}
